data("tictactoe")
#Définir les paramètres  de renforcement
control <- list(alpha = 0.2, gamma = 0.4, epsilon = 0.1)
#Faire le RL
model <- ReinforcementLearning(tictactoe, s = "State", a = "Action", r = "Reward",  s_new = "NextState", iter = 1, control = control)
library(devtools)
library(ReinforcementLearning)
data("tictactoe")
summary(tictactoe)
control <- list(alpha = 0.2, gamma = 0.4, epsilon = 0.1)
control
model <- ReinforcementLearning(tictactoe, s = "State", a = "Action", r = "Reward",  s_new = "NextState", iter = 1, control = control)
pol <- computePolicy(model)
head(pol)
model
summary(model)
model$Policy
library(arules)
data(Adult)
Adult
summary(Adult)
inspect(Adult[1:2])
itemFrequencyPlot(Adult)
rules<-apriori(Adult,parameter=list(support=0.01,confidence=0.6))
summary(rules)
inspect(rules)
rules<-apriori(Adult,parameter=list(support=0.01,minlen=2,maxlen=5,confidence=0.6))
inspect(rules[1:10])
rules1=sort(rules,by="lift")
inspect(rules1[1:5])
rules.IncomeSmall <- subset(rules, subset = rhs %in% "income=small")
rules.IncomeSmall <- sort(rules.IncomeSmall, by = "confidence")
summary(rules.IncomeSmall)
inspect(rules.IncomeSmall)
rules.sub <- subset(rules, subset = rhs %in% "marital-status=Never-married" & lift > 2)
rules.sub <- subset(rules, subset = lhs %ain%  c("age=Young", "workclass=Private"))
T1<-Sys.time()
T1<-Sys.time()
S=svm(f,Shuttle)
library(mlbench)
S=svm(f,Shuttle)
weights <- information.gain(Class~., data)
weights <- information.gain(Class~., Shuttle)
data("Shuttle")
weights <- information.gain(Class~., Shuttle)
data=Shuttle
result <- cfs(Type ~ ., data)
result <- cfs(Class ~ ., data)
library(FSelector)
library(e1071)
library(nnet)
result <- cfs(Class ~ ., data)
result
f <- as.simple.formula(result, "Class")
f
weights <- information.gain(Class~., data)
print(weights)
T1<-Sys.time()
SVM=svm(Class~., data)
T2<-Sys.time()
T2-T1
model <- svm(Class~., data)
Pred <- predict(model, data)
Test.mod <- cbind(data, Pred)
Confusion = table(data$Class, Test.mod$Pred)
Confusion
err <- 1-sum(diag(Confusion))/sum(Confusion)
err
T1<-Sys.time()
S=svm(f,Shuttle)
T2<-Sys.time()
T2-T1
model <-svm(f,Shuttle)
Pred <- predict(model, data)
Test.mod <- cbind(data, Pred)
Confusion = table(data$Class, Test.mod$Pred)
Confusion
err <- 1-sum(diag(Confusion))/sum(Confusion)
err
library( randomForest)
RF=randomForest(f, data=Shuttle)
RF.
RF
T1=Sys.time()
library( randomForest)
RF=randomForest(f, data=Shuttle)
RF
T2=Sys.time()
T2-
T1
library( randomForest)
RF=randomForest(Class~., data=Shuttle)
RF
library(nnet)
Shuttle
n=dim(Shuttle)[1]
index = sample(n, 0.7 * n)
Appren = Shuttle[index, ]
Test = Shuttle[-index, ]
RN <- nnet(f, Appren, size = 4,  decay = )
summary(RN)
pred=predict(RN,Test, type="class")
Confusion = table(Test$Class,pred)
err <- 1-sum(diag(Confusion))/sum(Confusion)
err
library(nnet)
Shuttle
n=dim(Shuttle)[1]
index = sample(n, 0.7 * n)
Appren = Shuttle[index, ]
Test = Shuttle[-index, ]
RN <- nnet(f, Appren, size = 4,  decay = )
summary(RN)
pred=predict(RN,Test, type="class")
Confusion = table(Test$Class,pred)
err <- 1-sum(diag(Confusion))/sum(Confusion)
err
T1=Sys.time()
library(nnet)
Shuttle
n=dim(Shuttle)[1]
index = sample(n, 0.7 * n)
Appren = Shuttle[index, ]
Test = Shuttle[-index, ]
RN <- nnet(f, Appren, size = 4,  decay = )
summary(RN)
pred=predict(RN,Test, type="class")
Confusion = table(Test$Class,pred)
err <- 1-sum(diag(Confusion))/sum(Confusion)
err
T2=Sys.time()
T2-T1
library(rpart)
library(rpart)
T1<-Sys.time()
# code R
evaluator <- function(subset) {
#k-fold cross validation
k <- 5
splits <- runif(nrow(Shuttle))
results = sapply(1:k, function(i) {
test.idx <- (splits >= (i - 1) / k) & (splits < i / k)
train.idx <- !test.idx
test <- Shuttle[test.idx, , drop=FALSE]
train <- Shuttle[train.idx, , drop=FALSE]
tree <- rpart(as.simple.formula(subset, "Class"), train)
error.rate = sum(test$Class != predict(tree, test, type="c")) / nrow(test)
return(1 - error.rate)
})
print(subset)
print(mean(results))
return(mean(results))
}
subset <- best.first.search(names(Shuttle)[-10], evaluator)
f <- as.simple.formula(subset, "Class")
print(f)
T2<-Sys.time()
Tdiff= difftime(time2, time1)
Tdiff= difftime(T2, T1)
Tdiff
library(rpart)
T1<-Sys.time()
# code R
evaluator <- function(subset) {
#k-fold cross validation
k <- 5
splits <- runif(nrow(Shuttle))
results = sapply(1:k, function(i) {
test.idx <- (splits >= (i - 1) / k) & (splits < i / k)
train.idx <- !test.idx
test <- Shuttle[test.idx, , drop=FALSE]
train <- Shuttle[train.idx, , drop=FALSE]
tree <- rpart(as.simple.formula(subset, "Class"), train)
error.rate = sum(test$Class != predict(tree, test, type="c")) / nrow(test)
return(1 - error.rate)
})
print(subset)
print(mean(results))
return(mean(results))
}
subset <- best.first.search(names(Shuttle)[-5], evaluator)
f <- as.simple.formula(subset, "Class")
print(f)
T2<-Sys.time()
Tdiff= difftime(time2, time1)
library(rpart)
T1<-Sys.time()
# code R
evaluator <- function(subset) {
#k-fold cross validation
k <- 10
splits <- runif(nrow(Shuttle))
results = sapply(1:k, function(i) {
test.idx <- (splits >= (i - 1) / k) & (splits < i / k)
train.idx <- !test.idx
test <- Shuttle[test.idx, , drop=FALSE]
train <- Shuttle[train.idx, , drop=FALSE]
tree <- rpart(as.simple.formula(subset, "Class"), train)
error.rate = sum(test$Class != predict(tree, test, type="c")) / nrow(test)
return(1 - error.rate)
})
print(subset)
print(mean(results))
return(mean(results))
}
subset <- best.first.search(names(Shuttle)[-10], evaluator)
f <- as.simple.formula(subset, "Class")
print(f)
T2<-Sys.time()
Tdiff= difftime(time2, time1)
> Tdiff= difftime(T2, T1)
Tdiff= difftime(T2, T1)
Tdiff
Samplingdata (1000 gridsequences)
data <-
,
data <-sampleGridSequence(1000)
Samplingdata (1000 gridsequences)
library(mlbench)
library(e1071)
Samplingdata ("1000 gridsequences")
data <-sampleGridSequence(1000)
sampleGridSequence
library(mlbench)
library(FSelector)
library(nnet)
data("Satellite")
data
data=Satellite
data
str(data)
library(nnet)
data
T1<-Sys.time()
index = sample(n, 0.7 * n)
Appren = dta[index, ]
Test = data[-index, ]
RN <- nnet(classes~., Appren, size = 4,  decay = )
summary(RN)
pred=predict(RN,Test, type="class")
Confusion = table(Test$classes,pred)
err <- 1-sum(diag(Confusion))/sum(Confusion)
err
library(e1071)
T2<-Sys.time()
T2-T1
library(nnet)
data
T1<-Sys.time()
index = sample(n, 0.7 * n)
Appren = data[index, ]
Test = data[-index, ]
RN <- nnet(classes~., Appren, size = 4,  decay = )
summary(RN)
pred=predict(RN,Test, type="class")
Confusion = table(Test$classes,pred)
err <- 1-sum(diag(Confusion))/sum(Confusion)
err
library(e1071)
T2<-Sys.time()
T2-T1
result <- cfs(classes ~ ., data)
result
weights <- information.gain(classses~., data)
print(weights)
weights <- information.gain(classes~., data)
print(weights)
subset <- cutoff.k(weights)
f <- as.simple.formula(subset, "classes")
print(f)
#Approche filtre
# Calculer le gain d'information de chaque attribut:
weights <- information.gain(classes~., data)
print(weights)
#Prendre les deux meilleurs:
subset <- cutoff.k(weights, 10)
f <- as.simple.formula(subset, "classes")
print(f)
T1<-Sys.time()
index = sample(n, 0.7 * n)
Appren = data[index, ]
Test = data[-index, ]
RN <- nnet(f~., Appren, size = 4,  decay = )
summary(RN)
pred=predict(RN,Test, type="class")
Confusion = table(Test$f,pred)
err <- 1-sum(diag(Confusion))/sum(Confusion)
err
library(e1071)
T2<-Sys.time()
T2-T1
T1<-Sys.time()
index = sample(n, 0.7 * n)
Appren = data[index, ]
Test = data[-index, ]
RN <- nnet(f~., Appren, size = 4,  decay = )
summary(RN)
pred=predict(RN,Test, type="f")
Confusion = table(Test$f,pred)
err <- 1-sum(diag(Confusion))/sum(Confusion)
err
library(e1071)
T2<-Sys.time()
T2-T1
T1<-Sys.time()
index = sample(n, 0.7 * n)
Appren = data[index, ]
Test = data[-index, ]
RN <- nnet(f~., Appren, size = 4,  decay = )
summary(RN)
pred=predict(RN,Test, type="f")
Confusion = table(Test$classes,pred)
err <- 1-sum(diag(Confusion))/sum(Confusion)
err
library(e1071)
T2<-Sys.time()
T2-T1
print(f)
T1<-Sys.time()
index = sample(n, 0.7 * n)
Appren = data[index, ]
Test = data[-index, ]
RN <- nnet(f~., Appren, size = 4,  decay = )
summary(RN)
pred=predict(RN,Test, type="f")
Confusion = table(Test$classes,pred)
err <- 1-sum(diag(Confusion))/sum(Confusion)
err
library(e1071)
T2<-Sys.time()
T2-T1
index = sample(n, 0.7 * n)
Appren = data[index, ]
Test = data[-index, ]
RN <- nnet(f~., Appren, size = 4,  decay = )
summary(RN)
pred=predict(RN,Test, type="f")
Confusion = table(f,pred)
err <- 1-sum(diag(Confusion))/sum(Confusion)
err
library(e1071)
T2<-Sys.time()
T2-T1
T1<-Sys.time()
index = sample(n, 0.7 * n)
Appren = data[index, ]
Test = data[-index, ]
RN <- nnet(f~., Appren, size = 4,  decay = )
summary(RN)
pred=predict(RN,Test, type="f")
Confusion = table(Test$classes,pred)
err <- 1-sum(diag(Confusion))/sum(Confusion)
err
library(e1071)
T2<-Sys.time()
T2-T1
T1<-Sys.time()
index = sample(n, 0.7 * n)
Appren = data[index, ]
Test = data[-index, ]
RN <- nnet(f~., Appren, size = 4,  decay = )
summary(RN)
pred=predict(RN,Test, type="f")
Confusion = table(Test$classes,pred)
err <- 1-sum(diag(Confusion))/sum(Confusion)
err
library(e1071)
T2<-Sys.time()
T2-T1
T1<-Sys.time()
index = sample(n, 0.7 * n)
Appren = data[index, ]
Test = data[-index, ]
RN <- nnet(f~., Appren, size = 4,  decay = )
summary(RN)
pred=predict(RN,Test, type="f")
Confusion = table(Test$classes,pred)
err <- 1-sum(diag(Confusion))/sum(Confusion)
err
library(e1071)
T2<-Sys.time()
T2-T1
T1<-Sys.time()
index = sample(n, 0.7 * n)
Appren = data[index, ]
Test = data[-index, ]
RN <- nnet(f~., Appren, size = 4,  decay = )
summary(RN)
pred=predict(RN,Test, type="f")
Confusion = table(Test$classes,pred)
err <- 1-sum(diag(Confusion))/sum(Confusion)
err
library(e1071)
T2<-Sys.time()
T2-T1
T1<-Sys.time()
index = sample(n, 0.7 * n)
Appren = data[index, ]
Test = data[-index, ]
RN <- nnet(f~., Appren, size = 4,  decay = )
summary(RN)
pred=predict(RN,Test, type="f")
Confusion = table(Test$f~,pred)
err <- 1-sum(diag(Confusion))/sum(Confusion)
err
library(e1071)
T2<-Sys.time()
T2-T1
T1<-Sys.time()
index = sample(n, 0.7 * n)
Appren = data[index, ]
Test = data[-index, ]
RN <- nnet(f~., Appren, size = 4,  decay = )
summary(RN)
pred=predict(RN,Test, type="f")
Confusion = table(Test$classes,pred)
err <- 1-sum(diag(Confusion))/sum(Confusion)
err
library(e1071)
T2<-Sys.time()
T2-T1
index = sample(n, 0.7 * n)
Appren = data[index, ]
Test = data[-index, ]
RN <- nnet(f~., Appren, size = 4,  decay = )
summary(RN)
T1<-Sys.time()
index = sample(n, 0.7 * n)
Appren = data[index, ]
Test = data[-index, ]
RN <- nnet(f~., Appren, size = 4,  decay = )
summary(RN)
pred=predict(RN,Test, type="class")
Confusion = table(Test$classes,pred)
err <- 1-sum(diag(Confusion))/sum(Confusion)
err
library(e1071)
T2<-Sys.time()
T2-T1
T1<-Sys.time()
index = sample(n, 0.7 * n)
Appren = data[index, ]
Test = data[-index, ]
RN <- nnet(f~., Appren, size = 4,  decay = )
summary(RN)
pred=predict(RN,Test, type=f~.)
Confusion = table(Test$classes,pred)
err <- 1-sum(diag(Confusion))/sum(Confusion)
err
library(e1071)
T2<-Sys.time()
T2-T1
T1<-Sys.time()
index = sample(n, 0.7 * n)
Appren = data[index, ]
Test = data[-index, ]
RN <- nnet(f~., Appren, size = 4,  decay = )
summary(RN)
pred=predict(RN,Test, type="f~.")
Confusion = table(Test$classes,pred)
err <- 1-sum(diag(Confusion))/sum(Confusion)
err
library(e1071)
T2<-Sys.time()
T2-T1
T1<-Sys.time()
index = sample(n, 0.7 * n)
Appren = data[index, ]
Test = data[-index, ]
RN <- nnet(f~., Appren, size = 4,  decay = )
summary(RN)
pred=predict(RN,Test, type="f~.")
Confusion = table(Test$f,pred)
err <- 1-sum(diag(Confusion))/sum(Confusion)
err
library(e1071)
T2<-Sys.time()
T2-T1
T1<-Sys.time()
index = sample(n, 0.7 * n)
Appren = data[index, ]
Test = data[-index, ]
RN <- nnet(f~., Appren, size = 4,  decay = )
summary(RN)
pred=predict(RN,Test, type="f~.")
Confusion = table(Test$f~.,pred)
err <- 1-sum(diag(Confusion))/sum(Confusion)
err
library(e1071)
T2<-Sys.time()
T2-T1
pred=predict(RN,Test, type="f")
pred=predict(RN,Test, type="subset")
T1<-Sys.time()
index = sample(n, 0.7 * n)
Appren = data[index, ]
Test = data[-index, ]
RN <- nnet(f~., Appren, size = 4,  decay = )
summary(RN)
pred=predict(RN,Test, type="class")
Confusion = table(Test$classes,pred)
err <- 1-sum(diag(Confusion))/sum(Confusion)
err
library(e1071)
T2<-Sys.time()
T2-T1
Confusion
Confusion = table(Test$classes,pred)
Confusion
setwd("~/Desktop/ML-work/Data Preprocessing")
dataset=read.csv('Data.csv')
dataset
